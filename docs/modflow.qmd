---
title: "Modflow Coupling"
---

Bach has been designed to provide a computationally efficient representation of
surface water for MODFLOW6. It does so by connecting to basic MODFLOW6 boundary
conditions: the river and drainage packages.

Bach connects to MODFLOW6 via the Basic Model Interface (BMI) and Extended
Model Interface (XMI) [@hughes2022modflow]. BMI describes the interface to
initialize a model, get values from its memory, run a timestep, etc. XMI
extends this interface to allow much finer control into MODFLOW6's solution
procedures. We have written a Julia package [@modflowinterface] which
implements this interface for the Julia programming language. In coupling, Bach
uses this interface to get the head values, the boundary condition water
levels, and the budgets term of the MODFLOW6 groundwater model while MODFLOW6
is running.

Additionally, links can be made with other (BMI/XMI-compliant) processes and
models. One example of such a link is using the irrigation demand calculated by
an unsaturated zone model; in the Netherlands Hydrological Instrument MetaSWAP
provides this demand.

# MODFLOW Concepts
## Drainage

The drainage package can be simulated to agricultural drains, ditches, or
draining streams. The amount of water removed from the aquifer is proportional
to the difference between the groundwater head and the drainage elevation.
Drainage only occurs when the head is larger than the elevation; this boundary
condition does not allow infiltration into the groundwater.

$$
Q_{drain} = \left\{
    \begin{array}{ c l }
        C_{drain} (\phi - h_{drain}) & \quad \textrm{if } \phi > h_{drain} \\
        0                            & \quad \textrm{otherwise}
     \end{array}
\right.
$$

## River

The river package can both drain the groundwater, or infiltrate surface water
to the groundwater. It limits the amount of water that can infiltrate when
the groundwater head falls below the river bottom, in which cases it assumes
atmospheric pressure conditions underneath the surface water.

$$
Q_{river} = \left\{
    \begin{array}{ c l }
        C_{river} (\phi - h_{river}) & \quad \textrm{if } \phi > b_{river} \\
        C_{river} (h_{river} - b_{river}) & \quad \textrm{if } \phi <= b_{river}
     \end{array}
\right.
$$

In the Netherlands, it is somewhat common to make a distinction between the
drainage and infiltration conductance of surface waters. Drainage conductance
is often larger than the infiltration conductance due to clogging processes,
seepage through sides of the ditches, less contracted flow lines, etc.

$$
Q_{river} = \left\{
    \begin{array}{ c l }
        C_{river,drn} (\phi - h_{river}) & \quad \textrm{if } \phi > h_{river} \\
        C_{river,inf} (\phi - h_{river}) & \quad \textrm{if } \phi <= h_{river} \\
        C_{river,inf} (h_{river} - b_{river}) & \quad \textrm{if } \phi <= b_{river}
     \end{array}
\right.
$$

MODFLOW6 does not support this (currently), but an identical effect may be
achieved by "stacking" a drainage package on top of a river package with these
values:

$$
\begin{array}{ c l }
  h_{drain} = h_{river} \\
  C_{drain} = C_{river,drn} - C_{river,inf}
\end{array}
$$

# Coupling

Broadly speaking, three schemes are commonly considered for coupling
hydrological kernels [@vanwalsum2011integration], [@hughes2012documentation]:

1. Sequential: the first model computes a timestep and calculates a state or flux.
This is passed on to the second model, which then computes its timestep.
2. Iterative: the first model computes a timestep and calculates a state or
flux. This is passed on to the second models, which computes its timestep. This
results in an updated boundary condition for the first model, which recomputes
the timestep, then the second model recomputes its timestep, etc. These
iterations are repeated until some convergence criteria are met.
3. Fully coupled: all equations (e.g. the governing equations of both
groundwater flow and surface water flow) are solved at the same time.

Each scheme has its advantages and disadvantages. Numerically speaking, the
fully coupled approach is most robust, but it effectively means a single
all-encompassing hydrological kernel. The first scheme is computationally the
cheapest, but states and fluxes lag one timestep behind, so that mass
conservation is not guaranteed. For example, based on its river levels,
MODFLOW6 may compute a infiltration flux. Bach then runs its timestep, and
finds that given MODFLOW6's infiltration flux, no water is present in the
surface waters: the infiltration flux has been overestimated by MODFLOW6, and
mass is not conserved. 

Such an error is avoided in the second scheme: states and fluxes only lag a
single iteration behind, and the iterations are repeated until the difference
is negligible. Taking the example from above, the emptying of the surface
waters would result in lower water levels and recuded infiltration in the
second iteration. Mass is conserved, but at a higher computational cost.

Currently, we have only implemented the sequential scheme for coupling bach to
MODFLOW6. However, the iterative solution is relatively easy to implement: it
is in essence a repeated sequential step.

## Numerical solution in MODFLOW

MODFLOW uses a backward-in-time implicit solution scheme. This creates a large
system of equations (a water balance for every cell), which it solves by
repeatedly solving a linearized system of equations instead. In matrix form,
this system of equations is expressed by:

$$
\mathbf{Ax} = \mathbf{b}
$$

Where $\mathbf{x}$ is a vector containing the head of every cell.

For the boundary conditions, this requires linearization of the flow equations.
Flow from outside of the aquifer (cell) may be represented by:

$$
a = p\phi + q
$$

(Equation 2-6 in the MODFLOW6 documentation [@langevin2017documentation].)

For e.g. a draining boundary condition, the flow is head dependent:

$$
a = C(h - \phi) = -C\phi + Ch
$$

With $C$ the conductance, $h$ the boundary head or elevation, and $\phi$
the groundwater head.

In MODFLOW's internal formulation, the term in $\mathbf{A}$ is called
"coefficient of head" or hcof. Terms in $\mathbf{b}$ are called "right hand
side" or rhs. We can separate the equation above:

$$
\begin{aligned}
p = \text{hcof} = -C \\
q = \textrm{rhs} = -Ch \\
a = -C\phi + Ch = \text{hcof} * \phi - \text{rhs}
\end{aligned}
$$

For every boundary condition, MODFLOW6 stores the `hcof` and `rhs` values. This
makes it quite convenient for us to compute the water budget for every boundary
condition: we simply multiply the hcof value by the head of the cell and
subtract the rhs.

Note that hcof may have a value of 0! For example, when for a river boundary
the $\phi <= b_{river}$ condition occurs, the flow into the cell is
controlled only by $h_{river}$ and $b_{river}$ (equal to recharge for the
linear solution).

## Sequential coupled solution

A coupled run stars by initializing both models and creating the exchange
information: which MODFLOW6 boundary condition is connected to which Bach
basin. While the model is running, the model proceeds through time as follows:

1. Bach solves the equations on a basin level; this occurs with adaptive
timestepping via ModelingToolkit.
2. At a specified time (in accordance with the MODFLOW6 time discretization),
the volumes are converted to MODFLOW6 boundary condition levels.
3. MODFLOW6 runs a timestep.
4. The drainage and infiltration budgets are computed from MODFLOW6 using the
equations described above and aggregated per basin.
5. The aggregated values are set as Bach boundary conditions, and Bach
solves until the next preset exchange time.

These steps run until the final timestep is finished.

## Iterative coupled solution

:::{.callout-note}
We have not implemented an iterative coupled solution yet. The section below
describes an approach.
:::

The simplest form of a linear solution occurs as follows:

1. MODFLOW6 computes drainage and infiltration flows.
2. Bach uses these flows to compute a storage volume for the basin.
3. The volume is translated to a water level for every MODFLOW6 boundary
condition in the basins.
4. MODFLOW6 recomputes drainage and infiltration flows with the updated water
levels, etc.

Such a scheme is not maximally efficient: the discharge and infiltration terms
are not constant, but are driven by a head difference. This head difference
depends on the level of the boundary conditions and head of every cell of the
groundwater model. If the surface waters of a basin empty, the water level will
decrease and drainage and infiltration flows will change. Ideally, we can
provide Bach with sufficient information, so that it make a a better estimate
of drainage and infiltration terms. 

As groundwater flow is often (approximately linear), we can use a linearization
to more efficiently compute the flow from Bach's side as well. In the iterative
coupled solution, we are solving both MODFLOW6 and Bach repeatedly, until they
produce same drainage or infiltration (approximately). One of Bach's basins
contains many MODFLOW cells with boundary conditions. We could add every
boundary condition to Bach's equations, but this is costly and cumbersome.
Fortunately, linearization allows us to "stack" (superpose) all the different
boundary conditions into a single, simple equation. In linear form, every
equation takes the form of:

$$
a = ph + q
$$

Note the $h$ rather than $\phi$, we are formulating from Bach's
perspective! We can sum all coefficients for p and q to provide a linear
groundwater response to Bach.

### Drainage

From Bach's perspective, the groundwater head is constant given a timestep,
so that:

$$
\begin{align}
p = -C \\
q = -C\phi
\end{align}
$$

When the head falls below the drainage elevation, the coefficients are 0.

### River

From Bach's persective, infiltration is never limited when the head falls below
the bottom:

$$
\begin{align}
p = -C \\
q = -Cb
\end{align}
$$

Otherwise, infiltration and drainage occur with the same equation as for the
drainage package:

$$
\begin{align}
p = -C \\
q = -C\phi
\end{align}
$$


# Assigning MODFLOW water levels

Principally, MODFLOW deals with water levels; Bach deals with water volumes.
The translation from a water volume to a water level should be a relatively
straightforward one:

$$
\Delta d = \frac{\Delta V}{A}
$$

However, the primary complication is that where Bach has **one** volume,
MODFLOW has many levels to adjust. The sum of all these adjustments times
their respective areas should result in the LSW volume change:

$$
\sum_{i=0}^{i=n} \Delta d_i A_i = \Delta V_{LSW}
$$

and

$$
h = b + d
$$

Where $h$ is water level, $b$ is the bed elevation, and $d$ is water depth.

It should be obvious that there are many ways to distribute this volume change
across the adjustment of every boundary condition of every cell. The main
question is when a volume grows or decreases, how should this volume change be
distributed across the basin?

The best method to find an answer to this question is to run a hydraulic model,
extract water heights, and compute the total volume. This can then be used as a
lookup table for every cell. These runs can also be used for parametrizing the
volume-discharge lookup tables. In coupling to Bach, we need only find the
appropriate volume and assign the associated water level. For efficiency, this
lookup table can be discretized in a limited number of steps, and in coupling
the level will be interpolated.

:::{.callout-note}
Great care is required when parametrizing these volume-level relationships.
As Bach does not know the properties of the surface water, it can perform
very limited validation of the volume-level lookup tables. As the total
volume of the basin is distributed accross **all** boundary conditions, it
should be checked that the change of the water column for every boundary
condition matches the total volume change of the basin.
:::

In principle, all (stationary!) hydraulic behavior of the basin can be described
approximately by these lookup tables.

## Parametrization

In coupling Bach to MODFLOW6, relations translating the Bach volume must be
given for every every cell (!) of every boundary condition. These consist of
piecewise linear relationships between the basin volume and its associated
water level for the boundary condition in the cell. The MODFLOW6 example cases
show examples of such a parametrization.
